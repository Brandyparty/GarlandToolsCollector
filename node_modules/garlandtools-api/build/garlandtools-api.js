"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLang = setLang;
exports.clearCache = clearCache;
exports.setCacheTime = setCacheTime;
exports.achievement = achievement;
exports.achievements = achievements;
exports.action = action;
exports.actions = actions;
exports.data = data;
exports.endgameGear = endgameGear;
exports.fate = fate;
exports.fates = fates;
exports.fishingSpots = fishingSpots;
exports.icon = icon;
exports.instance = instance;
exports.instances = instances;
exports.item = item;
exports.leve = leve;
exports.leves = leves;
exports.levelingGear = levelingGear;
exports.map = map;
exports.mob = mob;
exports.mobs = mobs;
exports.node = node;
exports.nodes = nodes;
exports.npc = npc;
exports.npcs = npcs;
exports.search = search;
exports.status = status;
exports.statuses = statuses;
exports.quest = quest;
exports.quests = quests;

var _cron = require("cron");

var _bent = _interopRequireDefault(require("bent"));

require("regenerator-runtime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var garlandTools = (0, _bent["default"])("https://www.garlandtools.org", "GET", "json", 200);
var lang = "en";
/**
 * Set the language used by the library.
 * @param {"en" | "de" | "fr" | "ja"} newLang
 */

function setLang(newLang) {
  lang = newLang;
}

var achievementURL = function achievementURL() {
  return "/db/doc/achievement/".concat(lang, "/2/");
};

var achievementsURL = function achievementsURL() {
  return "/db/doc/browse/".concat(lang, "/2/achievement.json");
};

var actionURL = function actionURL() {
  return "/db/doc/action/".concat(lang, "/2/");
};

var actionsURL = function actionsURL() {
  return "/db/doc/browse/".concat(lang, "/2/action.json");
};

var dataURL = function dataURL() {
  return "/db/doc/core/".concat(lang, "/3/data.json");
};

var endgameGearURL = function endgameGearURL() {
  return "/db/doc/equip/".concat(lang, "/2/end-");
};

var fateURL = function fateURL() {
  return "/db/doc/fate/".concat(lang, "/2/");
};

var fatesURL = function fatesURL() {
  return "/db/doc/browse/".concat(lang, "/2/fate.json");
};

var fishingURL = function fishingURL() {
  return "/db/doc/browse/".concat(lang, "/2/fishing.json");
};

var iconURL = function iconURL() {
  return "/files/icons/";
};

var instanceURL = function instanceURL() {
  return "/db/doc/instance/".concat(lang, "/2/");
};

var instancesURL = function instancesURL() {
  return "/db/doc/browse/".concat(lang, "/2/instance.json");
};

var itemURL = function itemURL() {
  return "/db/doc/item/".concat(lang, "/3/");
};

var leveURL = function leveURL() {
  return "/db/doc/leve/".concat(lang, "/3/");
};

var levesURL = function levesURL() {
  return "/db/doc/browse/".concat(lang, "/2/leve.json");
};

var levelingGearURL = function levelingGearURL() {
  return "/db/doc/equip/".concat(lang, "/2/leveling-");
};

var mapURL = function mapURL() {
  return "/files/maps/";
};

var mobURL = function mobURL() {
  return "/db/doc/mob/".concat(lang, "/2/");
};

var mobsURL = function mobsURL() {
  return "/db/doc/browse/".concat(lang, "/2/mob.json");
};

var nodeURL = function nodeURL() {
  return "/db/doc/node/".concat(lang, "/2/");
};

var nodesURL = function nodesURL() {
  return "/db/doc/browse/".concat(lang, "/2/node.json");
};

var npcURL = function npcURL() {
  return "/db/doc/npc/".concat(lang, "/2/");
};

var npcsURL = function npcsURL() {
  return "/db/doc/browse/".concat(lang, "/2/npc.json");
};

var searchURL = function searchURL() {
  return "/api/search.php";
};

var statusURL = function statusURL() {
  return "/db/doc/Status/".concat(lang, "/2/");
};

var statusesURL = function statusesURL() {
  return "/db/doc/browse/".concat(lang, "/2/status.json");
};

var questURL = function questURL() {
  return "/db/doc/quest/".concat(lang, "/2/");
};

var questsURL = function questsURL() {
  return "/db/doc/browse/".concat(lang, "/2/quest.json");
};

var cachedData = new Map(); // The cache, keyed with the URL. It stores a generic object value with properties data and time.

var cacheTime = 3600000; // A new request is made at least an hour after the previous. These files don't change very often.

var cache = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(url) {
    var now;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            // A simple function to check the cache for data.
            now = new Date().getTime();

            if (cachedData.get(url)) {
              _context.next = 10;
              break;
            }

            _context.t0 = cachedData;
            _context.t1 = url;
            _context.next = 6;
            return garlandTools(url);

          case 6:
            _context.t2 = _context.sent;
            _context.t3 = now;
            _context.t4 = {
              data: _context.t2,
              time: _context.t3
            };

            _context.t0.set.call(_context.t0, _context.t1, _context.t4);

          case 10:
            return _context.abrupt("return", cachedData.get(url).data);

          case 11:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function cache(_x) {
    return _ref.apply(this, arguments);
  };
}();

var timeoutCache = function timeoutCache() {
  var now = new Date().getTime();
  cachedData.forEach(function (value, key) {
    if (now >= value.time + cacheTime) {
      // Not a perfect check, but functional. Things can stay in the cache for a minimum of cacheTime ms, and a maximum of 2*cacheTime - 1 ms.
      cachedData["delete"](key);
    }
  });
};

var cacheJob = new _cron.CronJob(new Date(cacheTime), timeoutCache); //
// Public wrapper methods.
//

/**
 * Clears the cache.
 */

function clearCache() {
  cachedData.forEach(function (value, key, map) {
    cachedData["delete"](key);
  });
}

;
/**
 * Sets cache time.
 * @param time The time to cache data.
 */

function setCacheTime(time) {
  cacheTime = time;
  cacheJob.stop();
  cacheJob = new _cron.CronJob(new Date(cacheTime), clearCache);
} //
// API accessors.
//

/**
 * @param id The achievement's ID.
 * @returns An achievement's JSON listing.
 */


function achievement(_x2) {
  return _achievement.apply(this, arguments);
}
/**
 * @returns The achievement JSON index.
 */


function _achievement() {
  _achievement = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _context2.next = 2;
                        return cache(achievementURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context2.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2);
              }));

              return function (_x19, _x20) {
                return _ref2.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));
  return _achievement.apply(this, arguments);
}

function achievements() {
  return _achievements.apply(this, arguments);
}
/**
 * @param id The action's ID.
 * @returns An action's JSON listing.
 */


function _achievements() {
  _achievements = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            return _context5.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                  while (1) {
                    switch (_context4.prev = _context4.next) {
                      case 0:
                        _context4.next = 2;
                        return cache(achievementsURL());

                      case 2:
                        response = _context4.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context4.stop();
                    }
                  }
                }, _callee4);
              }));

              return function (_x21, _x22) {
                return _ref3.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _achievements.apply(this, arguments);
}

function action(_x3) {
  return _action.apply(this, arguments);
}
/**
 * @returns The action JSON index.
 */


function _action() {
  _action = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(id) {
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            return _context7.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                  while (1) {
                    switch (_context6.prev = _context6.next) {
                      case 0:
                        _context6.next = 2;
                        return cache(actionURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context6.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context6.stop();
                    }
                  }
                }, _callee6);
              }));

              return function (_x23, _x24) {
                return _ref4.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _action.apply(this, arguments);
}

function actions() {
  return _actions.apply(this, arguments);
}
/**
 * @returns The entirety of the JSON data index.
 */


function _actions() {
  _actions = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9() {
    return regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            return _context9.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                  while (1) {
                    switch (_context8.prev = _context8.next) {
                      case 0:
                        _context8.next = 2;
                        return cache(actionsURL());

                      case 2:
                        response = _context8.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context8.stop();
                    }
                  }
                }, _callee8);
              }));

              return function (_x25, _x26) {
                return _ref5.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  }));
  return _actions.apply(this, arguments);
}

function data() {
  return _data.apply(this, arguments);
}
/**
 * @param job The three-letter job abbreviation.
 * @returns The endgame equipment for a job.
 */


function _data() {
  _data = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11() {
    return regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            return _context11.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee10$(_context10) {
                  while (1) {
                    switch (_context10.prev = _context10.next) {
                      case 0:
                        _context10.next = 2;
                        return cache(dataURL());

                      case 2:
                        response = _context10.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context10.stop();
                    }
                  }
                }, _callee10);
              }));

              return function (_x27, _x28) {
                return _ref6.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  }));
  return _data.apply(this, arguments);
}

function endgameGear(_x4) {
  return _endgameGear.apply(this, arguments);
}
/**
 * @param id The FATE's ID.
 * @returns A FATE's JSON listing.
 */


function _endgameGear() {
  _endgameGear = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(job) {
    return regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            return _context13.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee12$(_context12) {
                  while (1) {
                    switch (_context12.prev = _context12.next) {
                      case 0:
                        _context12.next = 2;
                        return cache(endgameGearURL() + "".concat(job, ".json"));

                      case 2:
                        response = _context12.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context12.stop();
                    }
                  }
                }, _callee12);
              }));

              return function (_x29, _x30) {
                return _ref7.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  }));
  return _endgameGear.apply(this, arguments);
}

function fate(_x5) {
  return _fate.apply(this, arguments);
}
/**
 * @returns The FATE JSON index.
 */


function _fate() {
  _fate = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(id) {
    return regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            return _context15.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee14$(_context14) {
                  while (1) {
                    switch (_context14.prev = _context14.next) {
                      case 0:
                        _context14.next = 2;
                        return cache(fateURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context14.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context14.stop();
                    }
                  }
                }, _callee14);
              }));

              return function (_x31, _x32) {
                return _ref8.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  }));
  return _fate.apply(this, arguments);
}

function fates() {
  return _fates.apply(this, arguments);
}
/**
 * @returns The fishing spot JSON index.
 */


function _fates() {
  _fates = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee17() {
    return regeneratorRuntime.wrap(function _callee17$(_context17) {
      while (1) {
        switch (_context17.prev = _context17.next) {
          case 0:
            return _context17.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee16$(_context16) {
                  while (1) {
                    switch (_context16.prev = _context16.next) {
                      case 0:
                        _context16.next = 2;
                        return cache(fatesURL());

                      case 2:
                        response = _context16.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context16.stop();
                    }
                  }
                }, _callee16);
              }));

              return function (_x33, _x34) {
                return _ref9.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context17.stop();
        }
      }
    }, _callee17);
  }));
  return _fates.apply(this, arguments);
}

function fishingSpots() {
  return _fishingSpots.apply(this, arguments);
}
/**
 * @param type The database directory to retrieve from, e.g. "item", "action", etc.
 * @param id The icon ID.
 * @returns A PNG icon.
 */


function _fishingSpots() {
  _fishingSpots = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee19() {
    return regeneratorRuntime.wrap(function _callee19$(_context19) {
      while (1) {
        switch (_context19.prev = _context19.next) {
          case 0:
            return _context19.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref10 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee18(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee18$(_context18) {
                  while (1) {
                    switch (_context18.prev = _context18.next) {
                      case 0:
                        _context18.next = 2;
                        return cache(fishingURL());

                      case 2:
                        response = _context18.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context18.stop();
                    }
                  }
                }, _callee18);
              }));

              return function (_x35, _x36) {
                return _ref10.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context19.stop();
        }
      }
    }, _callee19);
  }));
  return _fishingSpots.apply(this, arguments);
}

function icon(_x6, _x7) {
  return _icon.apply(this, arguments);
}
/**
 * @param id The instance's ID.
 * @returns An instance's JSON listing.
 */


function _icon() {
  _icon = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee21(type, id) {
    return regeneratorRuntime.wrap(function _callee21$(_context21) {
      while (1) {
        switch (_context21.prev = _context21.next) {
          case 0:
            return _context21.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref11 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee20(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee20$(_context20) {
                  while (1) {
                    switch (_context20.prev = _context20.next) {
                      case 0:
                        _context20.next = 2;
                        return cache(iconURL() + "".concat(type, "/").concat(id, ".png"));

                      case 2:
                        response = _context20.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context20.stop();
                    }
                  }
                }, _callee20);
              }));

              return function (_x37, _x38) {
                return _ref11.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context21.stop();
        }
      }
    }, _callee21);
  }));
  return _icon.apply(this, arguments);
}

function instance(_x8) {
  return _instance.apply(this, arguments);
}
/**
 * @returns The instance JSON index.
 */


function _instance() {
  _instance = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee23(id) {
    return regeneratorRuntime.wrap(function _callee23$(_context23) {
      while (1) {
        switch (_context23.prev = _context23.next) {
          case 0:
            return _context23.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref12 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee22(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee22$(_context22) {
                  while (1) {
                    switch (_context22.prev = _context22.next) {
                      case 0:
                        _context22.next = 2;
                        return cache(instanceURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context22.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context22.stop();
                    }
                  }
                }, _callee22);
              }));

              return function (_x39, _x40) {
                return _ref12.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context23.stop();
        }
      }
    }, _callee23);
  }));
  return _instance.apply(this, arguments);
}

function instances() {
  return _instances.apply(this, arguments);
}
/**
 * @param id The item's ID.
 * @returns An item's JSON listing.
 */


function _instances() {
  _instances = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee25() {
    return regeneratorRuntime.wrap(function _callee25$(_context25) {
      while (1) {
        switch (_context25.prev = _context25.next) {
          case 0:
            return _context25.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref13 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee24(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee24$(_context24) {
                  while (1) {
                    switch (_context24.prev = _context24.next) {
                      case 0:
                        _context24.next = 2;
                        return cache(instancesURL());

                      case 2:
                        response = _context24.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context24.stop();
                    }
                  }
                }, _callee24);
              }));

              return function (_x41, _x42) {
                return _ref13.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context25.stop();
        }
      }
    }, _callee25);
  }));
  return _instances.apply(this, arguments);
}

function item(_x9) {
  return _item.apply(this, arguments);
}
/**
 * @param id The leve's ID.
 * @returns A leve's JSON listing.
 */


function _item() {
  _item = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee27(id) {
    return regeneratorRuntime.wrap(function _callee27$(_context27) {
      while (1) {
        switch (_context27.prev = _context27.next) {
          case 0:
            return _context27.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref14 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee26(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee26$(_context26) {
                  while (1) {
                    switch (_context26.prev = _context26.next) {
                      case 0:
                        _context26.next = 2;
                        return cache(itemURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context26.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context26.stop();
                    }
                  }
                }, _callee26);
              }));

              return function (_x43, _x44) {
                return _ref14.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context27.stop();
        }
      }
    }, _callee27);
  }));
  return _item.apply(this, arguments);
}

function leve(_x10) {
  return _leve.apply(this, arguments);
}
/**
 * @returns The levequest JSON index.
 */


function _leve() {
  _leve = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee29(id) {
    return regeneratorRuntime.wrap(function _callee29$(_context29) {
      while (1) {
        switch (_context29.prev = _context29.next) {
          case 0:
            return _context29.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref15 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee28(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee28$(_context28) {
                  while (1) {
                    switch (_context28.prev = _context28.next) {
                      case 0:
                        _context28.next = 2;
                        return cache(leveURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context28.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context28.stop();
                    }
                  }
                }, _callee28);
              }));

              return function (_x45, _x46) {
                return _ref15.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context29.stop();
        }
      }
    }, _callee29);
  }));
  return _leve.apply(this, arguments);
}

function leves() {
  return _leves.apply(this, arguments);
}
/**
 * @param job The three-letter job abbreviation.
 * @returns The leveling equipment for a job, sorted by level.
 */


function _leves() {
  _leves = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee31() {
    return regeneratorRuntime.wrap(function _callee31$(_context31) {
      while (1) {
        switch (_context31.prev = _context31.next) {
          case 0:
            return _context31.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref16 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee30(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee30$(_context30) {
                  while (1) {
                    switch (_context30.prev = _context30.next) {
                      case 0:
                        _context30.next = 2;
                        return cache(levesURL());

                      case 2:
                        response = _context30.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context30.stop();
                    }
                  }
                }, _callee30);
              }));

              return function (_x47, _x48) {
                return _ref16.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context31.stop();
        }
      }
    }, _callee31);
  }));
  return _leves.apply(this, arguments);
}

function levelingGear(_x11) {
  return _levelingGear.apply(this, arguments);
}
/**
 * @param zone The zone name. Some zones require a parent zone as well, such as "La Noscea/Lower La Noscea".
 * @returns A PNG map.
 */


function _levelingGear() {
  _levelingGear = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee33(job) {
    return regeneratorRuntime.wrap(function _callee33$(_context33) {
      while (1) {
        switch (_context33.prev = _context33.next) {
          case 0:
            return _context33.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref17 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee32(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee32$(_context32) {
                  while (1) {
                    switch (_context32.prev = _context32.next) {
                      case 0:
                        _context32.next = 2;
                        return cache(levelingGearURL() + "".concat(job, ".json"));

                      case 2:
                        response = _context32.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context32.stop();
                    }
                  }
                }, _callee32);
              }));

              return function (_x49, _x50) {
                return _ref17.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context33.stop();
        }
      }
    }, _callee33);
  }));
  return _levelingGear.apply(this, arguments);
}

function map(_x12) {
  return _map.apply(this, arguments);
}
/**
 * @param id The mob's ID.
 * @returns A mob's JSON listing.
 */


function _map() {
  _map = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee35(zone) {
    return regeneratorRuntime.wrap(function _callee35$(_context35) {
      while (1) {
        switch (_context35.prev = _context35.next) {
          case 0:
            return _context35.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref18 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee34(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee34$(_context34) {
                  while (1) {
                    switch (_context34.prev = _context34.next) {
                      case 0:
                        _context34.next = 2;
                        return cache(mapURL() + "".concat(zone, ".png"));

                      case 2:
                        response = _context34.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context34.stop();
                    }
                  }
                }, _callee34);
              }));

              return function (_x51, _x52) {
                return _ref18.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context35.stop();
        }
      }
    }, _callee35);
  }));
  return _map.apply(this, arguments);
}

function mob(_x13) {
  return _mob.apply(this, arguments);
}
/**
 * @returns The mob JSON index.
 */


function _mob() {
  _mob = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee37(id) {
    return regeneratorRuntime.wrap(function _callee37$(_context37) {
      while (1) {
        switch (_context37.prev = _context37.next) {
          case 0:
            return _context37.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref19 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee36(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee36$(_context36) {
                  while (1) {
                    switch (_context36.prev = _context36.next) {
                      case 0:
                        _context36.next = 2;
                        return cache(mobURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context36.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context36.stop();
                    }
                  }
                }, _callee36);
              }));

              return function (_x53, _x54) {
                return _ref19.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context37.stop();
        }
      }
    }, _callee37);
  }));
  return _mob.apply(this, arguments);
}

function mobs() {
  return _mobs.apply(this, arguments);
}
/**
 * @param id The node's ID.
 * @returns A node's JSON listing.
 */


function _mobs() {
  _mobs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee39() {
    return regeneratorRuntime.wrap(function _callee39$(_context39) {
      while (1) {
        switch (_context39.prev = _context39.next) {
          case 0:
            return _context39.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref20 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee38(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee38$(_context38) {
                  while (1) {
                    switch (_context38.prev = _context38.next) {
                      case 0:
                        _context38.next = 2;
                        return cache(mobsURL());

                      case 2:
                        response = _context38.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context38.stop();
                    }
                  }
                }, _callee38);
              }));

              return function (_x55, _x56) {
                return _ref20.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context39.stop();
        }
      }
    }, _callee39);
  }));
  return _mobs.apply(this, arguments);
}

function node(_x14) {
  return _node.apply(this, arguments);
}
/**
 * @returns The gathering node JSON index.
 */


function _node() {
  _node = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee41(id) {
    return regeneratorRuntime.wrap(function _callee41$(_context41) {
      while (1) {
        switch (_context41.prev = _context41.next) {
          case 0:
            return _context41.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref21 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee40(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee40$(_context40) {
                  while (1) {
                    switch (_context40.prev = _context40.next) {
                      case 0:
                        _context40.next = 2;
                        return cache(nodeURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context40.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context40.stop();
                    }
                  }
                }, _callee40);
              }));

              return function (_x57, _x58) {
                return _ref21.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context41.stop();
        }
      }
    }, _callee41);
  }));
  return _node.apply(this, arguments);
}

function nodes() {
  return _nodes.apply(this, arguments);
}
/**
 * @param id The NPC's ID.
 * @returns An NPC's JSON listing.
 */


function _nodes() {
  _nodes = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee43() {
    return regeneratorRuntime.wrap(function _callee43$(_context43) {
      while (1) {
        switch (_context43.prev = _context43.next) {
          case 0:
            return _context43.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref22 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee42(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee42$(_context42) {
                  while (1) {
                    switch (_context42.prev = _context42.next) {
                      case 0:
                        _context42.next = 2;
                        return cache(nodesURL());

                      case 2:
                        response = _context42.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context42.stop();
                    }
                  }
                }, _callee42);
              }));

              return function (_x59, _x60) {
                return _ref22.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context43.stop();
        }
      }
    }, _callee43);
  }));
  return _nodes.apply(this, arguments);
}

function npc(_x15) {
  return _npc.apply(this, arguments);
}
/**
 * @returns The NPC JSON index.
 */


function _npc() {
  _npc = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee45(id) {
    return regeneratorRuntime.wrap(function _callee45$(_context45) {
      while (1) {
        switch (_context45.prev = _context45.next) {
          case 0:
            return _context45.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref23 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee44(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee44$(_context44) {
                  while (1) {
                    switch (_context44.prev = _context44.next) {
                      case 0:
                        _context44.next = 2;
                        return cache(npcURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context44.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context44.stop();
                    }
                  }
                }, _callee44);
              }));

              return function (_x61, _x62) {
                return _ref23.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context45.stop();
        }
      }
    }, _callee45);
  }));
  return _npc.apply(this, arguments);
}

function npcs() {
  return _npcs.apply(this, arguments);
}
/**
 * @returns A JSON response for a search.
 */


function _npcs() {
  _npcs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee47() {
    return regeneratorRuntime.wrap(function _callee47$(_context47) {
      while (1) {
        switch (_context47.prev = _context47.next) {
          case 0:
            return _context47.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref24 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee46(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee46$(_context46) {
                  while (1) {
                    switch (_context46.prev = _context46.next) {
                      case 0:
                        _context46.next = 2;
                        return cache(npcsURL());

                      case 2:
                        response = _context46.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context46.stop();
                    }
                  }
                }, _callee46);
              }));

              return function (_x63, _x64) {
                return _ref24.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context47.stop();
        }
      }
    }, _callee47);
  }));
  return _npcs.apply(this, arguments);
}

function search(_x16) {
  return _search.apply(this, arguments);
}
/**
 * @param id The status's ID.
 * @returns An status's JSON listing.
 */


function _search() {
  _search = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee49(query) {
    var _this = this;

    return regeneratorRuntime.wrap(function _callee49$(_context49) {
      while (1) {
        switch (_context49.prev = _context49.next) {
          case 0:
            return _context49.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref25 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee48(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee48$(_context48) {
                  while (1) {
                    switch (_context48.prev = _context48.next) {
                      case 0:
                        _context48.next = 2;
                        return cache(searchURL() + "?text=".concat(query, "&lang=").concat(_this.lang));

                      case 2:
                        response = _context48.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context48.stop();
                    }
                  }
                }, _callee48);
              }));

              return function (_x65, _x66) {
                return _ref25.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context49.stop();
        }
      }
    }, _callee49);
  }));
  return _search.apply(this, arguments);
}

function status(_x17) {
  return _status.apply(this, arguments);
}
/**
 * @returns The status JSON index.
 */


function _status() {
  _status = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee51(id) {
    return regeneratorRuntime.wrap(function _callee51$(_context51) {
      while (1) {
        switch (_context51.prev = _context51.next) {
          case 0:
            return _context51.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref26 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee50(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee50$(_context50) {
                  while (1) {
                    switch (_context50.prev = _context50.next) {
                      case 0:
                        _context50.next = 2;
                        return cache(statusURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context50.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context50.stop();
                    }
                  }
                }, _callee50);
              }));

              return function (_x67, _x68) {
                return _ref26.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context51.stop();
        }
      }
    }, _callee51);
  }));
  return _status.apply(this, arguments);
}

function statuses() {
  return _statuses.apply(this, arguments);
}
/**
 * @param id The quest's ID.
 * @returns A quest's JSON listing.
 */


function _statuses() {
  _statuses = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee53() {
    return regeneratorRuntime.wrap(function _callee53$(_context53) {
      while (1) {
        switch (_context53.prev = _context53.next) {
          case 0:
            return _context53.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref27 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee52(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee52$(_context52) {
                  while (1) {
                    switch (_context52.prev = _context52.next) {
                      case 0:
                        _context52.next = 2;
                        return cache(statusesURL());

                      case 2:
                        response = _context52.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context52.stop();
                    }
                  }
                }, _callee52);
              }));

              return function (_x69, _x70) {
                return _ref27.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context53.stop();
        }
      }
    }, _callee53);
  }));
  return _statuses.apply(this, arguments);
}

function quest(_x18) {
  return _quest.apply(this, arguments);
}
/**
 * @returns The quest JSON index.
 */


function _quest() {
  _quest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee55(id) {
    return regeneratorRuntime.wrap(function _callee55$(_context55) {
      while (1) {
        switch (_context55.prev = _context55.next) {
          case 0:
            return _context55.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref28 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee54(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee54$(_context54) {
                  while (1) {
                    switch (_context54.prev = _context54.next) {
                      case 0:
                        _context54.next = 2;
                        return cache(questURL() + "".concat(id, ".json"));

                      case 2:
                        response = _context54.sent;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context54.stop();
                    }
                  }
                }, _callee54);
              }));

              return function (_x71, _x72) {
                return _ref28.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context55.stop();
        }
      }
    }, _callee55);
  }));
  return _quest.apply(this, arguments);
}

function quests() {
  return _quests.apply(this, arguments);
}

function _quests() {
  _quests = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee57() {
    return regeneratorRuntime.wrap(function _callee57$(_context57) {
      while (1) {
        switch (_context57.prev = _context57.next) {
          case 0:
            return _context57.abrupt("return", new Promise( /*#__PURE__*/function () {
              var _ref29 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee56(resolve, reject) {
                var response;
                return regeneratorRuntime.wrap(function _callee56$(_context56) {
                  while (1) {
                    switch (_context56.prev = _context56.next) {
                      case 0:
                        _context56.next = 2;
                        return cache(questsURL());

                      case 2:
                        response = _context56.sent.browse;
                        resolve(response);

                      case 4:
                      case "end":
                        return _context56.stop();
                    }
                  }
                }, _callee56);
              }));

              return function (_x73, _x74) {
                return _ref29.apply(this, arguments);
              };
            }()));

          case 1:
          case "end":
            return _context57.stop();
        }
      }
    }, _callee57);
  }));
  return _quests.apply(this, arguments);
}
